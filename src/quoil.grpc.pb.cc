// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: quoil.proto

#include "quoil.pb.h"
#include "quoil.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace quoil {

static const char* Vactube_method_names[] = {
  "/quoil.Vactube/TextChat",
};

std::unique_ptr< Vactube::Stub> Vactube::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Vactube::Stub> stub(new Vactube::Stub(channel));
  return stub;
}

Vactube::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_TextChat_(Vactube_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::quoil::TextMessage, ::quoil::TextMessage>* Vactube::Stub::TextChatRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::quoil::TextMessage, ::quoil::TextMessage>::Create(channel_.get(), rpcmethod_TextChat_, context);
}

void Vactube::Stub::experimental_async::TextChat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::quoil::TextMessage,::quoil::TextMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::quoil::TextMessage,::quoil::TextMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_TextChat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::quoil::TextMessage, ::quoil::TextMessage>* Vactube::Stub::AsyncTextChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::quoil::TextMessage, ::quoil::TextMessage>::Create(channel_.get(), cq, rpcmethod_TextChat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::quoil::TextMessage, ::quoil::TextMessage>* Vactube::Stub::PrepareAsyncTextChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::quoil::TextMessage, ::quoil::TextMessage>::Create(channel_.get(), cq, rpcmethod_TextChat_, context, false, nullptr);
}

Vactube::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Vactube_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Vactube::Service, ::quoil::TextMessage, ::quoil::TextMessage>(
          std::mem_fn(&Vactube::Service::TextChat), this)));
}

Vactube::Service::~Service() {
}

::grpc::Status Vactube::Service::TextChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::quoil::TextMessage, ::quoil::TextMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace quoil

